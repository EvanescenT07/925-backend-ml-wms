# Warehouse Management System (WMS) - Video Object Detection

## üöÄ Project Overview

This project is a **Warehouse Management System (WMS)** for Capstone Project that leverages **YOLO-based object detection** on video feeds. It features:

- Real-time object detection from warehouse video or camera streams
- FastAPI backend with REST and WebSocket endpoints
- Live video streaming and detection results to a web frontend
- Modular structure for ONNX, Ultralytics, and custom video feed backends
- Comprehensive unit tests for robust development

---

## üõ†Ô∏è Getting Started

### 1. **Clone the Repository**

```bash
git clone https://github.com/your-username/warehouse-management-system.git
cd warehouse-management-system/backend-ml-system
```

# Windows

```bash
python -m venv venv
venv\Scripts\activate
```

# Linux/Mac

```bash
python3 -m venv venv
source venv/bin/activate
```

### 2. **Install Dependencies**

Choose your backend implementation and install requirements:

# Ultralytics

```bash
cd .ultralytics
pip install --upgrade pip
pip install -r [requirements.txt](http://_vscodecontentref_/0)
```

# ONNX Runtime

```bash
cd .onnx
pip install --upgrade pip
pip install -r [requirements.txt](http://_vscodecontentref_/1)
```

# Custom Video Feed

```bash
cd .video*feed
pip install --upgrade pip
pip install -r [requirements.txt](http://\_vscodecontentref*/2)
```

### 3. **Prepare Environment Variables**

Rename the example [.env.example] into [.env] file and adjust as needed

### 4. **Start the FastAPI Server**

```bash
# From the desired backend folder
uvicorn wms_main:app --reload
```

- The API endpoint will be available at: **http://localhost:8000/**
- The Video Stream endpoint: **http://localhost:8000/video**
- WebSocket detection endpoint: **ws://localhost:8000/ws/detect**

## üìù Notes

- **Virtual Environment**: Always activate your virtual environment before installing dependencies or running the app.
- **Logging**: Logs are saved to `wms.log` and can also be configured to show in the terminal.
- **Configuration**: Change model/video paths and other settings in the `.env` file.
- **Testing**: Run `pytest test_wms.py -v` in your backend folder to execute all unit tests.
- **Docker Support**: See the provided Dockerfiles for containerized deployment.

## ‚ú® Highlights

- **Modular**: Supports ONNX, Ultralytics, and custom video feed backends.
- **Real-Time**: Live video and detection streaming to the web frontend.
- **Tested**: Comprehensive unit tests for reliability and maintainability.

## üìÇ Project Structure

```
backend-ml-system/
  .onnx/           # ONNX runtime backend
  .ultralytics/    # Ultralytics runtime backend
  .video_feed/     # Custom video feed backend
  frontend/        # Test HTML frontend
  test-script      # Test functionality model script
  utils/           # Other helper script
```

---

## ü§ù Credits

Developed for Capstone Project, President University.
